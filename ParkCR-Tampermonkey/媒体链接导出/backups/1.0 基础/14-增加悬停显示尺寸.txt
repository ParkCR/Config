// ==UserScript==
// @name         媒体链接导出工具
// @namespace    http://tampermonkey.net/
// @version      1.9
// @description  点击按钮获取当前页面的所有媒体链接，并提供导出功能
// @author       您的名字
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 创建按钮
    function createButton() {
        const button = document.createElement('button');
        button.innerText = '获取媒体链接';
        button.style.position = 'fixed';
        button.style.top = '10px';
        button.style.right = '10px';
        button.style.zIndex = '1000';
        button.style.width = '150px'; // 固定宽度
        button.style.height = '40px'; // 固定高度
        button.style.lineHeight = '40px'; // 使文字垂直居中
        button.style.textAlign = 'center'; // 使文字水平居中
        button.style.boxSizing = 'border-box'; // 包括内边距和边框
        button.style.border = '1px solid #0056b3'; // 蓝色边框
        button.style.borderRadius = '5px'; // 圆角
        button.style.backgroundColor = '#007bff'; // 蓝色背景
        button.style.color = '#fff'; // 白色字体
        button.style.outline = 'none'; // 移除点击时的轮廓线
        button.style.transition = 'background-color 0.3s'; // 平滑过渡效果

        // 拖动功能
        let isDragging = false;
        let offsetX, offsetY;

        // 检查鼠标是否在按钮的左下方
        function isMouseInDragArea(e) {
            const rect = button.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const dragAreaWidth = 20; // 左侧可拖动区域的宽度
            const dragAreaHeight = 20; // 下方可拖动区域的高度
            return x < dragAreaWidth || y > rect.height - dragAreaHeight;
        }

        button.addEventListener('mousedown', (e) => {
            if (isMouseInDragArea(e)) {
                isDragging = true;
                offsetX = e.clientX - button.offsetLeft;
                offsetY = e.clientY - button.offsetTop;
                button.style.userSelect = 'none'; // 防止文本被选中
                e.preventDefault(); // 阻止默认行为，防止文本选中等
            }
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                button.style.left = `${e.clientX - offsetX}px`;
                button.style.top = `${e.clientY - offsetY}px`;
            }
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
            button.style.userSelect = ''; // 恢复文本选择
        });

        // 只有直接点击按钮才打开模态窗口
        button.addEventListener('click', (e) => {
            if (!isDragging && !isMouseInDragArea(e)) {
                openModal();
            }
        });

        // 改变鼠标图标
        button.addEventListener('mousemove', (e) => {
            if (isMouseInDragArea(e)) {
                button.style.cursor = 'move'; // 设置鼠标指针为移动图标
            } else {
                button.style.cursor = 'default'; // 恢复默认鼠标图标
            }
        });

        document.body.appendChild(button);
    }

    // 打开模态窗口
    function openModal() {
        const modal = document.createElement('div');
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
        modal.style.display = 'flex';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'flex-start'; // 修改对齐方式
        modal.style.zIndex = '1001';
        modal.style.opacity = '0'; // 初始透明度为0
        modal.style.transition = 'opacity 0.3s, transform 0.3s'; // 添加过渡效果
        modal.style.transform = 'scale(0.9)'; // 初始缩放为0.9

        const modalContent = document.createElement('div');
        modalContent.style.background = '#fff';
        modalContent.style.padding = '20px';
        modalContent.style.borderRadius = '5px';
        modalContent.style.maxWidth = '90vw'; // 最大宽度为视窗的90%
        modalContent.style.maxHeight = '90vh'; // 最大高度为视窗的90%
        modalContent.style.overflowY = 'auto'; // 垂直滚动条
        modalContent.style.boxSizing = 'border-box';
        modalContent.style.display = 'flex';
        modalContent.style.flexDirection = 'column';

        // 搜索框
        const searchContainer = document.createElement('div');
        searchContainer.style.display = 'flex';
        searchContainer.style.alignItems = 'center';
        searchContainer.style.marginBottom = '20px';

        const searchLabel = document.createElement('label');
        searchLabel.innerText = '搜索格式:';
        searchContainer.appendChild(searchLabel);

        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = '例如: jpg, png, mp4...';
        searchInput.style.width = '150px';
        searchInput.style.marginLeft = '10px';
        searchInput.oninput = () => filterMedia(); // 当输入变化时重新过滤媒体
        searchContainer.appendChild(searchInput);

        modalContent.appendChild(searchContainer);

        // 尺寸筛选部分
        const sizeFilterContainer = document.createElement('div');
        sizeFilterContainer.style.display = 'flex';
        sizeFilterContainer.style.alignItems = 'center';
        sizeFilterContainer.style.justifyContent = 'center'; // 居中对齐
        sizeFilterContainer.style.marginBottom = '20px';

        const minWidthLabel = document.createElement('label');
        minWidthLabel.innerText = '最小宽度:';
        sizeFilterContainer.appendChild(minWidthLabel);

        const minWidthSlider = document.createElement('input');
        minWidthSlider.type = 'range';
        minWidthSlider.min = '0';
        minWidthSlider.max = '2000';
        minWidthSlider.value = '0';
        minWidthSlider.style.width = '150px';
        sizeFilterContainer.appendChild(minWidthSlider);

        const minWidthValue = document.createElement('span');
        minWidthValue.innerText = minWidthSlider.value;
        sizeFilterContainer.appendChild(minWidthValue);

        const minHeightLabel = document.createElement('label');
        minHeightLabel.innerText = '最小高度:';
        sizeFilterContainer.appendChild(minHeightLabel);

        const minHeightSlider = document.createElement('input');
        minHeightSlider.type = 'range';
        minHeightSlider.min = '0';
        minHeightSlider.max = '2000';
        minHeightSlider.value = '0';
        minHeightSlider.style.width = '150px';
        sizeFilterContainer.appendChild(minHeightSlider);

        const minHeightValue = document.createElement('span');
        minHeightValue.innerText = minHeightSlider.value;
        sizeFilterContainer.appendChild(minHeightValue);

        // 更新尺寸值
        function updateSizeValues() {
            minWidthValue.innerText = minWidthSlider.value;
            minHeightValue.innerText = minHeightSlider.value;
            filterMedia();
        }

        minWidthSlider.oninput = updateSizeValues;
        minHeightSlider.oninput = updateSizeValues;

        modalContent.appendChild(sizeFilterContainer);

        // 按钮容器
        const buttonsContainer = document.createElement('div');
        buttonsContainer.style.display = 'flex';
        buttonsContainer.style.justifyContent = 'center'; // 按钮居中
        buttonsContainer.style.alignItems = 'center'; // 垂直居中
        buttonsContainer.style.marginBottom = '20px';
        buttonsContainer.style.gap = '10px'; // 减小按钮间的间距

        // 创建按钮样式
        function createStyledButton(text, onClick) {
            const button = document.createElement('button');
            button.innerText = text;
            button.style.width = '100px'; // 固定宽度
            button.style.height = '40px'; // 固定高度
            button.style.lineHeight = '40px'; // 使文字垂直居中
            button.style.textAlign = 'center'; // 使文字水平居中
            button.style.boxSizing = 'border-box'; // 包括内边距和边框
            button.style.border = '1px solid #0056b3'; // 蓝色边框
            button.style.borderRadius = '5px'; // 圆角
            button.style.backgroundColor = '#007bff'; // 蓝色背景
            button.style.color = '#fff'; // 白色字体
            button.style.outline = 'none'; // 移除点击时的轮廓线
            button.style.transition = 'background-color 0.3s'; // 平滑过渡效果
            button.onclick = onClick;
            return button;
        }

        // 关闭按钮
        const closeButton = createStyledButton('关闭', () => closeModal(modal));
        buttonsContainer.appendChild(closeButton);

        // 全选按钮
        const selectAllButton = createStyledButton('全选', () => {
            const allChecked = checkboxes.every(cb => cb.checked);
            checkboxes.forEach(cb => {
                cb.checked = !allChecked;
                updateMediaBorder(cb, cb.parentElement.querySelector('img, video'));
            });
            if (allChecked) {
                selectAllButton.innerText = '全选';
            } else {
                selectAllButton.innerText = '取消全选';
            }
        });
        buttonsContainer.appendChild(selectAllButton);

        // 反选按钮
        const invertSelectionButton = createStyledButton('反选', () => {
            checkboxes.forEach(cb => {
                cb.checked = !cb.checked;
                updateMediaBorder(cb, cb.parentElement.querySelector('img, video'));
            });
        });
        buttonsContainer.appendChild(invertSelectionButton);

        // 导出按钮
        const exportButton = createStyledButton('导出', () => {
            const selectedMedia = Array.from(modalContent.querySelectorAll('input[type="checkbox"]:checked'))
                .map(cb => cb.value);
            exportMedia(selectedMedia, modal);
        });
        buttonsContainer.appendChild(exportButton);

        modalContent.appendChild(buttonsContainer);

        // 媒体列表容器
        const mediaListContainer = document.createElement('div');
        mediaListContainer.style.display = 'grid';
        mediaListContainer.style.gridTemplateColumns = 'repeat(auto-fill, minmax(120px, 1fr))';
        mediaListContainer.style.gap = '10px';
        mediaListContainer.style.marginBottom = '20px';
        modalContent.appendChild(mediaListContainer);

        // 获取所有媒体并添加到模态窗口
        const mediaElements = Array.from(document.querySelectorAll('img, video, source[type="image/gif"]'));
        const checkboxes = [];
        let lastClickedCheckbox = null;

        function filterMedia() {
            const searchValue = searchInput.value.trim().toLowerCase(); // 获取搜索框内容
            const minWidth = parseInt(minWidthSlider.value, 10);
            const minHeight = parseInt(minHeightSlider.value, 10);
            mediaListContainer.innerHTML = ''; // 清空现有媒体

            mediaElements.forEach((media, index) => {
                const isImage = media.tagName === 'IMG' || (media.tagName === 'SOURCE' && media.type === 'image/gif');
                const isVideo = media.tagName === 'VIDEO';
                const naturalWidth = isImage ? media.naturalWidth : media.videoWidth;
                const naturalHeight = isImage ? media.naturalHeight : media.videoHeight;
                const mediaType = getMediaType(media);

                if ((naturalWidth >= minWidth && naturalHeight >= minHeight) &&
                    (searchValue === '' || mediaType.endsWith(searchValue))) {
                    const mediaElement = isImage ? media.cloneNode() : media.cloneNode();
                    mediaElement.style.maxWidth = '100%';
                    mediaElement.style.height = 'auto';
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.value = media.src || media.currentSrc || media.getAttribute('data-src') || media.parentNode.src;
                    checkboxes.push(checkbox);

                    const mediaWrapper = document.createElement('div');
                    mediaWrapper.style.position = 'relative';
                    mediaWrapper.style.cursor = 'pointer';
                    mediaWrapper.appendChild(mediaElement);

                    // 复选框放在媒体的右上角
                    checkbox.style.position = 'absolute';
                    checkbox.style.top = '0';
                    checkbox.style.right = '0';
                    checkbox.style.zIndex = '1';
                    mediaWrapper.appendChild(checkbox);

                    // 添加格式标签
                    const formatLabel = document.createElement('div');
                    formatLabel.style.position = 'absolute';
                    formatLabel.style.top = '0';
                    formatLabel.style.left = '0';
                    formatLabel.style.backgroundColor = 'rgba(0, 0, 0, 0.5)'; // 调整透明度
                    formatLabel.style.color = '#fff';
                    formatLabel.style.padding = '2px 5px';
                    formatLabel.style.borderRadius = '3px';
                    formatLabel.style.fontSize = '12px';
                    formatLabel.style.zIndex = '2';
                    formatLabel.innerText = mediaType;
                    mediaWrapper.appendChild(formatLabel);

                    // 鼠标悬停显示尺寸
                    const sizeLabel = document.createElement('div');
                    sizeLabel.style.position = 'absolute';
                    sizeLabel.style.bottom = '0';
                    sizeLabel.style.left = '0';
                    sizeLabel.style.backgroundColor = 'rgba(0, 0, 0, 0.5)'; // 不透明度为0.5
                    sizeLabel.style.color = '#fff';
                    sizeLabel.style.padding = '2px 5px';
                    sizeLabel.style.borderRadius = '3px';
                    sizeLabel.style.fontSize = '12px';
                    sizeLabel.style.zIndex = '2';
                    sizeLabel.innerText = `${naturalWidth}x${naturalHeight}`;
                    sizeLabel.style.display = 'none';
                    sizeLabel.style.width = '100%'; // 宽度与媒体元素一致
                    sizeLabel.style.textAlign = 'center'; // 文字居中
                    mediaWrapper.appendChild(sizeLabel);

                    mediaWrapper.onmouseover = () => {
                        sizeLabel.style.display = 'block';
                    };
                    mediaWrapper.onmouseout = () => {
                        sizeLabel.style.display = 'none';
                    };

                    // 点击媒体切换复选框状态
                    mediaWrapper.onclick = (event) => {
                        const shiftKey = event.shiftKey;
                        const checkboxIndex = checkboxes.indexOf(checkbox);

                        if (shiftKey && lastClickedCheckbox) {
                            const start = Math.min(lastClickedCheckbox.index, checkboxIndex);
                            const end = Math.max(lastClickedCheckbox.index, checkboxIndex);
                            for (let i = start; i <= end; i++) {
                                checkboxes[i].checked = true;
                                updateMediaBorder(checkboxes[i], checkboxes[i].parentElement.querySelector('img, video'));
                            }
                        } else {
                            checkbox.checked = !checkbox.checked;
                            updateMediaBorder(checkbox, mediaElement);
                        }

                        lastClickedCheckbox = { checkbox, index: checkboxIndex };
                    };

                    mediaListContainer.appendChild(mediaWrapper);
                }
            });
        }

        function getMediaType(media) {
            if (media.tagName === 'IMG') {
                return media.src.split(';').pop().split('/').pop().split('?')[0].split('.').pop();
            } else if (media.tagName === 'VIDEO') {
                return media.currentSrc.split(';').pop().split('/').pop().split('?')[0].split('.').pop();
            } else if (media.tagName === 'SOURCE' && media.type === 'image/gif') {
                return 'gif';
            }
            return 'unknown';
        }

        function updateMediaBorder(checkbox, mediaElement) {
            if (checkbox.checked) {
                mediaElement.style.border = '2px solid #007bff'; // 选中时显示蓝色边框
            } else {
                mediaElement.style.border = 'none'; // 未选中时移除边框
            }
        }

        filterMedia(); // 初始加载时过滤媒体

        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // 显示模态窗口
        setTimeout(() => {
            modal.style.opacity = '1';
            modal.style.transform = 'scale(1)';
        }, 10);

        // 监听点击事件，点击模态窗口外部关闭模态窗口
        modal.addEventListener('click', (event) => {
            if (event.target === modal) {
                closeModal(modal);
            }
        });
    }

    // 关闭模态窗口
    function closeModal(modal) {
        modal.style.opacity = '0';
        modal.style.transform = 'scale(0.9)';

        // 等待过渡效果结束后再移除元素
        setTimeout(() => {
            document.body.removeChild(modal);
        }, 300); // 300ms 是过渡效果的时间
    }

    // 导出媒体链接
    function exportMedia(media, modal) {
        const format = prompt('请选择导出格式 (json/md/txt/html):', 'json');
        let content = '';
        const currentPageUrl = window.location.href; // 获取当前页面的网址

        switch(format.toLowerCase()) {
            case 'json':
                content = `[\n  "${currentPageUrl}",\n${media.map(url => `  "${url}"`).join(',\n')}\n]`;
                break;
            case 'md':
                content = `页面地址: [${currentPageUrl}](${currentPageUrl})\n\n${media.map(url => `![](${url})`).join('\n')}`;
                break;
            case 'txt':
                content = `页面地址: ${currentPageUrl}\n\n${media.join('\n')}`;
                break;
            case 'html':
                content = `
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>Media Links</title>
                        <style>
                            body {
                                font-family: Arial, sans-serif;
                                display: flex;
                                flex-direction: column;
                                align-items: center;
                                justify-content: center;
                                padding: 20px;
                                box-sizing: border-box;
                            }
                            h1 {
                                margin-bottom: 20px;
                            }
                            .media-grid {
                                display: grid;
                                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                                gap: 10px;
                                width: 100%;
                                max-width: 1200px;
                            }
                            img, video {
                                max-width: 100%;
                                height: auto;
                            }
                        </style>
                    </head>
                    <body>
                        <h1>页面地址: <a href="${currentPageUrl}">${currentPageUrl}</a></h1>
                        <div class="media-grid">
                            ${media.map(url => {
                                const ext = url.split('.').pop().toLowerCase();
                                if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
                                    return `<img src="${url}" alt="Image">`;
                                } else if (['mp4', 'webm', 'ogg'].includes(ext)) {
                                    return `<video controls src="${url}"></video>`;
                                } else {
                                    return '';
                                }
                            }).join('\n')}
                        </div>
                    </body>
                    </html>
                `;
                break;
            default:
                alert('未知格式！');
                return;
        }
        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${document.title.replace(/[^a-zA-Z0-9]/g, '_')}.${format}`; // 使用网页标题作为文件名
        a.click();

        // 显示导出成功的提示
        showExportSuccessMessage(modal);
    }

    // 显示导出成功的提示
    function showExportSuccessMessage(modal) {
        const successMessage = document.createElement('div');
        successMessage.style.position = 'fixed';
        successMessage.style.top = '50%';
        successMessage.style.left = '50%';
        successMessage.style.transform = 'translate(-50%, -50%)';
        successMessage.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        successMessage.style.color = '#fff';
        successMessage.style.padding = '20px';
        successMessage.style.borderRadius = '5px';
        successMessage.style.zIndex = '1002';
        successMessage.innerText = '导出成功！';

        document.body.appendChild(successMessage);

        // 1秒后关闭提示
        setTimeout(() => {
            document.body.removeChild(successMessage);
        }, 1000);
    }

    // 初始化
    createButton();
})();